" Misc {{{
  set nocompatible
  filetype off
  set shell=/bin/sh
  " Colorscheme.
  colorscheme zm5
  let g:colors_name="zm5"
  set laststatus=2
  set encoding=utf-8
  set t_Co=256
  syntax enable
  let g:syntastic_python_checkers=['pylint']
  " Tab {{{
      set expandtab
  " }}}
  set number
  set fillchars+=vert:\|
  set backspace=indent,eol,start
  set ttimeoutlen=50
  set fcs+=vert:\ 
  set cursorline
  noremap <F1> <ESC>:set relativenumber! <ENTER>
  set numberwidth=1
  " Undofile {{{
      set undofile
      set undodir=~/.vimundo
  " }}}
  let g:netrw_liststyle = 3
  " Dictionary {{{
      let g:dict_hosts = [
                  \["127.0.0.1", ["gcide", "vera", "fd-eng-fra", "fd-fra-eng", "moby-thesaurus"]],
                  \]
  " }}}
  set maxfuncdepth=9001
  augroup scribble
      autocmd BufRead,BufNewFile *.scrbl set filetype=scribble
  augroup END
  " Change default binding for YankRing (<c-p) because of CtrlP.
  let g:yankring_replace_n_pkey="<C-H>"
  set history=500
  " Enables GVim like behaviour of showing the ``cached''
  " motions.
  set showcmd
  " Disables the ``echom'' of the current mode, because I have a
  " status line.
  set noshowmode
  " Wild menu {{{
    set wildmode=longest,list,full
    set wildmenu
  " }}}
  " Searching.
  set hls
  set is
  set ic
  " Indentation.
  set autoindent
  filetype indent on
  filetype plugin on
  set sw=2
  " Spell checking function, not even sure I need this anymore...
  function! Spellchecking()
      set spell
      highlight SpellBad ctermfg=green ctermbg=red
  endfunction
  nnoremap <leader><leader>s :call Spellchecking()<cr>
  let g:startify_custom_header =
    \ map(split(system('fortune | cowsay'), '\n'), '"   ". v:val') + ['','']
    \ "Yes, hello."
  " Whitespace management {{{
      set list
      "set listchars=trail:◉,tab:->
      "set listchars=trail:◦,tab:>-
      set listchars=tab:>-
      autocmd ColorScheme * highlight ExtraWhitespace ctermfg=red guifg=red
      highlight ExtraWhitespace ctermfg=red guifg=red
      match ExtraWhitespace /\s\+$/
  " }}}
  " Tagbar {{{
    autocmd FileType *.tex nested Tagbar
  " }}}
  " Autosave (Bram please) From: " http://stackoverflow.com/questions/6991638/how-to-auto-save-a-file-every-1-second-in-vi {{{
  let g:save_time = localtime()
  au BufRead,BufNewFile * let g:save_time = localtime()
  let g:autosave_time = 20
  function! AutoSave()
      if bufname("%") ==# 'ControlP'
      else
          if((localtime() - g:save_time) >= g:autosave_time)
              update
              let g:save_time = localtime()
          endif
      endif
  endfunction
  au CursorMoved * call AutoSave()
  au BufWritePre * let g:save_time = localtime()

  " }}}
  autocmd BufNew,BufRead Godfile set ft=ruby
  let g:indent_guides_auto_colors = 0
  let g:indent_guides_start_level = 2
  let g:indent_guides_guide_size = 1
  autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  guibg=red  ctermbg=grey
  autocmd VimEnter,Colorscheme * :hi IndentGuidesEven guibg=green ctermbg=darkgrey
  autocmd VimEnter * :IndentGuidesEnable
" }}}
