autoload -U add-zsh-hook

export PATH=$HOME/atom/out/Atom:$PATH

export EDITOR=e

setopt CORRECT

function detect_command() {
    command -v $1 >/dev/null 2>&1 || return 1
    return 0
}

function run_command() {
    if [ $($(detect_command $1); echo $?) -eq 0 ]; then
        $@
    fi
}

function source_if_exists() {
    [ ! -e "$1" ] || source "$1"
}

function ep {
    emacsclient -c -s $(basename $(projectroot)) $@
}

function ep-start {
    sleep 1 # wait for shells to initialise, THEN start
    waitforemacs $(basename $(projectroot))
    if [[ $(basename $(projectroot)) == $(basename $HOME) ]]; then
        . /tmp/emacs$UID/ready/server-env
    else
        . /tmp/emacs$UID/ready/$(basename $(projectroot))-env
    fi
    emacs
    rm /tmp/emacs$UID/ready/$PROJECT_NAME
}

function ep-stop {
    if [[ $(basename $(projectroot)) == $(basename $HOME) ]]; then
        emacsclient -t -s server -e '(safe-buffers-kill-emacs)'
        rm /tmp/emacs$UID/ready/server
        rm /tmp/emacs$UID/waiting/server
        rm /tmp/emacs$UID/server
    else
        emacsclient -t -s $(basename $(projectroot)) -e '(safe-buffers-kill-emacs)'
        rm /tmp/emacs$UID/ready/$(basename (projectroot))
        rm /tmp/emacs$UID/waiting/$(basename (projectroot))
        rm /tmp/emacs$UID/$(basename (projectroot))
    fi
}

function gi() { curl -L -s https://www.gitignore.io/api/$@ }

mt_load_mods() {
  find -maxdepth 1 -mindepth 1 -type d -printf 'load_mod_%f = true\n' >> $1
}

export PATH=$PATH:$HOME/.fzf/bin
export PATH=$PATH:$HOME/.local/bin
export GOPATH=$HOME/gostuff

export PATH=$HOME/bin:$PATH

HISTSIZE=99999999
SAVEHIST=99999999
HISTFILE=~/.zsh_history
setopt SHARE_HISTORY HIST_IGNORE_DUPS EXTENDED_HISTORY

if [ -f "${HOME}/.gpg-agent-info" ]; then
    . "${HOME}/.gpg-agent-info"
    export GPG_AGENT_INFO
else
    if [[ $HOST == "linux-wtin" ]]; then
        gpg-agent --enable-ssh-support --daemon --write-env-file "${HOME}/.gpg-agent-info"
    else
        gpg-agent --daemon --write-env-file "${HOME}/.gpg-agent-info"
    fi
fi

typeset -A key

key[Home]=${terminfo[khome]}
key[End]=${terminfo[kend]}
key[Insert]=${terminfo[kich1]}
key[Delete]=${terminfo[kdch1]}
key[Up]=${terminfo[kcuu1]}
key[Down]=${terminfo[kcud1]}
key[Left]=${terminfo[kcub1]}
key[Right]=${terminfo[kcuf1]}
key[PageUp]=${terminfo[kpp]}
key[PageDown]=${terminfo[knp]}

# setup key accordingly
[[ -n "${key[Home]}"    ]] && bindkey "${key[Home]}"    beginning-of-line
[[ -n "${key[End]}"     ]] && bindkey "${key[End]}"     end-of-line
[[ -n "${key[Insert]}"  ]] && bindkey "${key[Insert]}"  overwrite-mode
[[ -n "${key[Delete]}"  ]] && bindkey "${key[Delete]}"  delete-char
[[ -n "${key[Up]}"      ]] && bindkey "${key[Up]}"      up-line-or-history
[[ -n "${key[Down]}"    ]] && bindkey "${key[Down]}"    down-line-or-history
[[ -n "${key[Left]}"    ]] && bindkey "${key[Left]}"    backward-char
[[ -n "${key[Right]}"   ]] && bindkey "${key[Right]}"   forward-char

# Finally, make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
function zle-line-init () {
    echoti smkx
}
function zle-line-finish () {
    echoti rmkx
}

zle -N zle-line-init
zle -N zle-line-finish

# source_if_exists ~/.zsh/plugins/opp.zsh/opp.zsh
# source_if_exists ~/.zsh/plugins/opp.zsh/opp/*.zsh
source_if_exists ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source_if_exists ~/.zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
source_if_exists ~/.homesick/repos/homeshick/homeshick.sh
source_if_exists ~/.zsh/plugins/zsh-vcs-prompt/zshrc.sh
source_if_exists ~/.zsh/plugins/zsh-autopair/zsh-autopair.plugin.zsh
source_if_exists ~/.zsh/plugins/fzf.zsh
source_if_exists ~/.locals.sh # host specific things *not* to be checked into version control.

if detect_command pyenv; then
    eval "$(pyenv init -)"
fi

setopt interactivecomments

fpath=(~/.zsh/plugins/zsh-completions/src ~/.zsh/completion $fpath)

autoload -Uz compinit
compinit

zstyle ':completion:*' menu select
zstyle ':completion:*' auto-description 'specify: %d'
zstyle ':completion:*' completer _expand _complete _correct _approximate
zstyle ':completion:*' format 'Completing %d'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*' list-colors ''
zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
zstyle ':completion:*' use-compctl true
zstyle ':completion:*' verbose true
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
eval "$(dircolors -b)"

if [[ -z "$STY" && -z "$TMUX" ]] && [[ "$TERM" == (xterm|rxvt|konsole)* || -n "$COLORTERM" ]] && [[ "$TERM" != "dumb"  ]]; then
    export TERM='xterm-256color'
fi

bindkey -v

bindkey -M vicmd 'k' history-substring-search-up
bindkey -M vicmd 'j' history-substring-search-down
bindkey '^[[A' history-substring-search-up
bindkey '^[[B' history-substring-search-down

bindkey -s '^O' '^qcd\n'

ZSH_VCS_PROMPT_ENABLE_CACHING='true'

VIM_PROMPT="%F{yellow}%F{blue}[%f%F{yellow}N%f%F{blue}]%k%f"
function z-preexec() {
    local th="$?"
    local reason
    case "$th" in
        0) # green for "normal" exit status (as in, no error)
            color='green' ;;
        *) # anything else is usually an error, color red
            color='red' ;;
    esac
    z_retcode_prompt="%K{red}$reason%k%F{$color}"$th'%f'
}
add-zsh-hook precmd z-preexec
function zle-line-init zle-keymap-select {
    RPS1='${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/} $z_retcode_prompt'
    zle reset-prompt
}

zle -N zle-line-init
zle -N zle-keymap-select
fancy-ctrl-z () {
    if [[ $#BUFFER -eq 0 ]]; then
        fg
        zle redisplay
    else
        zle push-input
        zle clear-screen
    fi
}
zle -N fancy-ctrl-z
bindkey '^Z' fancy-ctrl-z

fe() {
    local file
    file=$(fzf --query="$1" --select-1 --exit-0)
    [ -n "$file" ] && ${EDITOR:-vim} "$file"
}

fd() {
    local dir
    dir=$(find ${1:-*} -path '*/\.*' -prune \
               -o -type d -print 2> /dev/null | fzf +m) &&
        cd "$dir"
}

fda() {
    local dir
    dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
}

fh() {
    eval $(([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s | sed 's/ *[0-9]* *//')
}

fkill() {
    ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9}
}

fbr() {
    local branches branch
    branches=$(git branch) &&
        branch=$(echo "$branches" | fzf +s +m) &&
        git checkout $(echo "$branch" | sed "s/.* //")
}

fstage() {
    local files to_stage
    files="$(git status --porcelain)"
    to_stage=$(echo $files | fzf -m | rev | cut -d' ' -f1 | rev)
    git add $(echo $to_stage | tr '\n' ' ')
}

fco() {
    local commits commit
    commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
        commit=$(echo "$commits" | fzf +s +m -e) &&
        git checkout $(echo "$commit" | sed "s/ .*//")
}

ftags() {
    local line
    [ -e tags ] &&
        line=$(
            awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
                cut -c1-80 | fzf --nth=1,2
            ) && $EDITOR $(cut -f3 <<< "$line") -c "set nocst" \
                         -c "silent tag $(cut -f2 <<< "$line")"
}

SSH_ENV="$HOME/.ssh/environment"

  function start_agent {
       echo "Initialising new SSH agent..."
       ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
       echo succeeded
       chmod 600 "${SSH_ENV}"
       . "${SSH_ENV}" > /dev/null
       ssh-add
  }

  # Source SSH settings, if applicable

if [[ $HOST != "linux-wtin" ]]; then
  if [ -f "${SSH_ENV}" ]; then
       . "${SSH_ENV}" > /dev/null
       ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
           start_agent;
       }
  else
       start_agent;
  fi
fi

_p_color_date=cyan
_p_color_pwd=cyan
_p_color_pwd_fg=red
_p_color_user=white
_p_color_user_fg=black
_p_color_host=white
_p_color_host_fg=black

p_module_privsymbol() {
      if [[ $(print -P "%#") == "#" ]] ; then
          _p_color_user_privsymbol=red
      else
          _p_color_user_privsymbol=blue
      fi
      echo "%F{$_p_color_user_privsymbol}%#%f"
  }

p_module_host() {
    echo "%F{$_p_color_host_fg}%K{$_p_color_host}%m%k%f"
}

p_module_user() {
    echo "%F{$_p_color_user_fg}%K{$_p_color_user}%n%F{red}‚çü%f%k%f"
}

p_module_pwd() {
    echo "%F{$_p_color_pwd_fg}%K{$_p_color_pwd}%~%k%f"
}

p_module_time() {
    echo '%F{$_p_color_date}%D{%H:%M:%S}%f'
}

setopt prompt_subst
 autoload -U colors && colors
p_load() {
    export PS1=$(p_module_pwd)" "
    export PS1=$PS1$(p_module_time)" "
    export PS1=$PS1$(p_module_user)
    export PS1=$PS1$(p_module_host)" "
    export PS1=$PS1$(p_module_privsymbol)" "
    export PS1=$PS1'$(vcs_super_info)'
    export PS1=$PS1$'\n'
    export PS1=$PS1"$ "
}

p_load

[[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ '

if $DISPLAY; then unset TMUX; fi

[[ ! -z $TMUX ]] && export TMOUT=3600

alias gcem="git commit -am 'The commit message was empty'"

alias grmv="git remote -v"

alias gpull='git pull'

alias gstatus='git status'

alias ..='cd ..'

alias cab='cabal install'

alias :q='exit'

alias disp='DISPLAY=:100 '

export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

if detect_command direnv; then
    eval "$(direnv hook zsh)"
fi

export PATH="/home/zack/.linuxbrew/bin:$PATH"
export MANPATH="/home/zack/.linuxbrew/share/man:$MANPATH"
export INFOPATH="/home/zack/.linuxbrew/share/info:$INFOPATH"

export PATH=/usr/local/bin:$PATH
