This configuration was a sample configuration taken elsewhere, I have unfortuently forgotten where it came from.

This configuration is heavily modified from the original one.

* Requires

  #+begin_src lua :tangle yes
    -- Standard awesome library
    local gears = require("gears")
    local awful = require("awful")
    awful.rules = require("awful.rules") -- used to make Chromium (and others) to go specific workspaces (and more!)
    require("awful.autofocus")
    -- Widget and layout library
    local wibox = require("wibox") -- text boxes, buttons, and other widgets
    -- Theme handling library
    local beautiful = require("beautiful") -- theming engine
    local naughty = require("naughty") -- notification library
    local menubar = require("menubar") -- menubars
    local vicious = require("vicious")
    local alttab = require('alttab')
    require("obvious.volume_alsa") -- volume control
    require("obvious.mem")
    require("obvious.battery") -- battery indicator

  #+END_SRC

* Utility functions

** =does_monitor_exist()=


   Determine whether a monitor exists.   

   #+BEGIN_SRC lua :tangle yes
     function does_monitor_exist(m)
        if vicious.widgets.os()[4] == 'linux.site' then
           if screen.count() == 2 then
              return m
           else
              return 1
           end
        else
           return 1
        end
     end
   #+END_SRC

*** TODO

    - [ ] Make more robust [0/1]
      - [ ] Use xrandr or something instead of using a host.

* Error handling

** Handle startup errors
    
   #+BEGIN_SRC lua :tangle yes

     -- Check if awesome encountered an error during startup and fell back to
     -- another config (This code will only ever execute for the fallback config)
     if awesome.startup_errors then
        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, there were errors during startup!",
                         text = awesome.startup_errors })
        right_layout:add(obvious.battery())
     end
   #+END_SRC

** Handle runtime errors

   #+BEGIN_SRC lua :tangle yes
     do
        local in_error = false
        awesome.connect_signal("debug::error", function (err)
                                  -- Make sure we don't go into an endless error loop
                                  if in_error then return end
                                  in_error = true

                                  naughty.notify({ preset = naughty.config.presets.critical,
                                                   title = "Oops, an error happened!",
                                                   text = err })
                                  in_error = false
        end)
     end
   #+END_SRC

* Theme
  
  #+BEGIN_SRC lua :tangle yes
    -- Themes define colours, icons, and wallpapers
    beautiful.init(os.getenv("HOME").."/.config/awesome/themes/zenburn/theme.lua")
  #+END_SRC

* Adjust screens

  #+BEGIN_SRC lua :tangle yes

    if os.getenv("HOST") == "linux-nyit" then
       awful.util.spawn("xrandr --output VGA-1 --right-of HDMI-1 --output HDMI-1 --mode 1680x1050")
    end
    if os.getenv("HOST") == "xieshaij" then
       awful.util.spawn("xvfbsetupz")
    end
  #+END_SRC

* Miscellaneous variables


* Layouts

  #+BEGIN_SRC lua :tangle yes
    local layouts =
       {
          awful.layout.suit.tile,
          awful.layout.suit.tile.left,
          awful.layout.suit.tile.bottom,
          awful.layout.suit.tile.top,
          awful.layout.suit.fair,
          awful.layout.suit.fair.horizontal,
          awful.layout.suit.max,
          awful.layout.suit.max.fullscreen,
          awful.layout.suit.magnifier
       }
  #+END_SRC

** TODO [0/1]

   - [ ] Learn how to make my own layout.

* Wallpaper
  
  #+BEGIN_SRC lua :tangle yes
    if beautiful.wallpaper then
       for s = 1, screen.count() do
          gears.wallpaper.maximized(beautiful.wallpaper, s, true)
       end
    end
  #+END_SRC
  
* Tags

  #+BEGIN_SRC lua :tangle yes
    -- Define a tag table which hold all screen tags.
    tags = {}
    for s = 1, screen.count() do
       -- Each screen has its own tag table.
       tags[s] = awful.tag({"➊", "➋", "➌", "➍", "➎", "➏", "➐", "➑", "➒", "➓"}, s, layouts[1])
    end
  #+END_SRC
  
* Widgets
** Menu

   #+BEGIN_SRC lua :tangle yes
     -- Create a laucher widget and a main menu
     myawesomemenu = {
        { "restart", awesome.restart }, -- restart button
        { "quit", awesome.quit } -- quit button
     }

     mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon }}})

     mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon, menu = mymainmenu }) -- top left button for the icon

     -- Menubar configuration
     menubar.utils.terminal = terminal -- Set the terminal for applications that require it
   #+END_SRC

** Clock

   #+BEGIN_SRC  :tangle yes
  -- Create a textclock widget
  mytextclock = awful.widget.textclock()

   #+END_SRC

** CPU

   #+BEGIN_SRC lua :tangle yes
     local blingbling = require("blingbling")
     cpu_cores_conf = {height = 18, width = 8, rounded_size = 0.3}
     cpu_cores = {}

     function determine_core_count()
        if os.getenv("HOST") == "xieshaij" then
           return 4
        else
           return 1
        end
     end
     for i=1,determine_core_count() do
        cpu_cores[i] = blingbling.progress_graph(cpu_cores_conf)
        vicious.register(cpu_cores[i], vicious.widgets.cpu, "$"..(i+1).."",1)
     end
   #+END_SRC

** Initial variables

   #+BEGIN_SRC lua :tangle yes
     mywibox = {} -- entire top bar
     mypromptbox = {}
     mylayoutbox = {}
     mytaglist = {}
   #+END_SRC

** Tag buttons

   #+BEGIN_SRC lua :tangle yes
     mytaglist[s]=blingbling.tagslist(s,  awful.widget.taglist.filter.all, mytaglist.buttons)
     mytaglist.buttons = awful.util.table.join(
        awful.button({ }, 1, awful.tag.viewonly),
        awful.button({ modkey }, 1, awful.client.movetotag),
        awful.button({ }, 3, awful.tag.viewtoggle),
        awful.button({ modkey }, 3, awful.client.toggletag),
        awful.button({ }, 4, function(t) awful.tag.viewnext(awful.tag.getscreen(t)) end),
        awful.button({ }, 5, function(t) awful.tag.viewprev(awful.tag.getscreen(t)) end)
     )
   #+END_SRC

** Task bar buttons

   #+BEGIN_SRC lua :tangle yes
     mytasklist = {}
     mytasklist.buttons = awful.util.table.join(
        awful.button({ }, 1, function (c)
              if c == client.focus then
                 c.minimized = true
              else
                 -- Without this, the following
                 -- :isvisible() makes no sense
                 c.minimized = false
                 if not c:isvisible() then
                    awful.tag.viewonly(c:tags()[1])
                 end
                 -- This will also un-minimize
                 -- the client, if needed
                 client.focus = c
                 c:raise()
              end
        end),
        awful.button({ }, 3, function ()
              if instance then
                 instance:hide()
                 instance = nil
              else
                 instance = awful.menu.clients({ width=250 })
              end
        end),
        awful.button({ }, 4, function ()
              awful.client.focus.byidx(1)
              if client.focus then client.focus:raise() end
        end),
        awful.button({ }, 5, function ()
              awful.client.focus.byidx(-1)
              if client.focus then client.focus:raise() end
     end))

     -- Create a tasklist widget
   #+END_SRC

   #+BEGIN_SRC lua :tangle yes
     for s = 1, screen.count() do -- Create a promptbox for each screen
   #+END_SRC

** Task bar buttons (continued)
   
   #+BEGIN_SRC lua :tangle yes
     mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)
   #+END_SRC

** Volume
   #+BEGIN_SRC lua :tangle yes
     if vicious.widgets.os()[4] == "linux-nyit.site" then
        speaker_name = "Master"
     else
        speaker_name = "Speaker"
     end
     if os.getenv('HOST') ~= "xieshaij" then
        right_layout:add(obvious.volume_alsa(0, speaker_name))
        right_layout:add(obvious.battery())
     end
     local right_layout = wibox.layout.fixed.horizontal()
     if s == 1 then right_layout:add(wibox.widget.systray()) end
     right_layout:add(mylayoutbox[s])
     right_layout:add(mytextclock)
   #+END_SRC
   
** Layout
   
   Image widget to contain an icon indicating which  layout we're using.
   
   #+BEGIN_SRC lua :tangle yes
     -- Create an imagebox widget which will contains an icon indicating which layout we`re using.
     -- We need one layoutbox per screen.
     mylayoutbox[s] = awful.widget.layoutbox(s)
     mylayoutbox[s]:buttons(awful.util.table.join(awful.button({ }, 1, function () awful.layout.inc(1, s, layouts) end),
                                                  awful.button({ }, 3, function () awful.layout.inc(-1, s, layouts) end),
                                                  awful.button({ }, 4, function () awful.layout.inc(1, s, layouts) end),
                                                  awful.button({ }, 5, function () awful.layout.inc(-1, s, layouts) end)))
   #+END_SRC

** Wibox

   #+BEGIN_SRC lua :tangle yes
     -- Create the wibox
     mywibox[s] = awful.wibox({ position = "top", screen = s })

   #+END_SRC


** Left aligned

   #+BEGIN_SRC lua :tangle yes
     -- Widgets that are aligned to the left
     local left_layout = wibox.layout.fixed.horizontal()
     left_layout:add(mylauncher)
     left_layout:add(mytaglist[s])
     left_layout:add(mypromptbox[s])
     for i=1,determine_core_count() do
        left_layout:add(cpu_cores[i])
     end
   #+END_SRC


** Bring it all together

   #+BEGIN_SRC lua :tangle yes




     -- Now bring it all together (with the tasklist in the middle)
     local layout = wibox.layout.align.horizontal()
     layout:set_left(left_layout)
     layout:set_middle(mytasklist[s])
     layout:set_right(right_layout)

     mywibox[s]:set_widget(layout)
     end
   #+END_SRC

** Next/prev tag
   
   #+BEGIN_SRC lua :tangle yes


     root.buttons(awful.util.table.join(
                     awful.button({ }, 3, function () mymainmenu:toggle() end),
                     awful.button({ }, 4, awful.tag.viewnext),
                     awful.button({ }, 5, awful.tag.viewprev)
     ))
   #+END_SRC
     
* Keys
  
** Initial table
   #+BEGIN_SRC lua :tangle yes
     globalkeys = awful.util.table.join(
   #+END_SRC
   
   #+BEGIN_SRC lua :tangle yes
     awful.key({ modkey }, "g", function() alttab.switch(1, "Alt_L", "g", "g") end),
     awful.key({ modkey, "Control" }, "g", function() alttab.switch(-1, "Alt_L", "g", "g") end),
     awful.key({ modkey }, "s", function() awful.util.spawn("rofi -show window") end),
     awful.key({ modkey, "Shift" }, "`", function () awful.util.spawn("lock") end),
     awful.key({ modkey, }, "¬", function () awful.util.spawn("lock") end),
     awful.key({modkey, "Shift"}, "x", xrandr),
     awful.key({ modkey, "Shift" }, "p", function () awful.util.spawn("passmenu") end), -- Spawn the pass dmenu script.

     awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

     awful.key({ modkey,           }, "j",
        function ()
           awful.client.focus.byidx(1)
           if client.focus then client.focus:raise() end
     end),
     awful.key({ modkey,           }, "k",
        function ()
           awful.client.focus.byidx(-1)
           if client.focus then client.focus:raise() end
     end),
     awful.key({ modkey,           }, "w", function () mymainmenu:show() end),

     -- Layout manipulation
     awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(1)    end),
     awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx(-1)    end),
     awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative(1) end),
     awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
     awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
     awful.key({ modkey,           }, "Tab",
        function ()
           awful.client.focus.history.previous()
           if client.focus then
              client.focus:raise()
           end
     end),

     -- Standard program
     awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
     awful.key({ modkey, "Control" }, "r", awesome.restart),
     awful.key({ modkey, "Shift"   }, "q", awesome.quit),

     awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact(0.05)    end),
     awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
     awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster(1)      end),
     awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
     awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol(1)         end),
     awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
     awful.key({ modkey, "Control" }, "n", awful.client.restore),

     awful.key({ modkey }, "p", function() awful.util.spawn("rofi -show run") end) -- (dmenu2)
     )

     clientkeys = awful.util.table.join(
        awful.key({ modkey }, "Next",  function () awful.client.moveresize(20,  20, -40, -40) end),
        awful.key({ modkey }, "Prior", function () awful.client.moveresize(-20, -20,  40,  40) end),
        awful.key({ modkey }, "Down",  function () awful.client.moveresize(0,  20,   0,   0) end),
        awful.key({ modkey }, "Up",    function () awful.client.moveresize(0, -20,   0,   0) end),
        awful.key({ modkey }, "Left",  function () awful.client.moveresize(-20,   0,   0,   0) end),
        awful.key({ modkey }, "Right", function () awful.client.moveresize(20,   0,   0,   0) end),
        awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
        awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
        awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
        awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
        awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
        awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
        awful.key({ modkey,           }, "n",
           function (c)
              -- The client currently has the input focus, so it cannot be
              -- minimized, since minimized clients can`t have the focus.
              c.minimized = true
        end),
        awful.key({ modkey,           }, "m",
           function (c)
              c.maximized_horizontal = not c.maximized_horizontal
              c.maximized_vertical   = not c.maximized_vertical
        end)
     )

     -- Bind all key numbers to tags.
     -- Be careful: we use keycodes to make it works on any keyboard layout.
     -- This should map on the top row of your keyboard, usually 1 to 9.
     for i = 1, 9 do
        globalkeys = awful.util.table.join(globalkeys,
                                           awful.key({ modkey }, "#" .. i + 9,
                                              function ()
                                                 local screen = mouse.screen
                                                 local tag = awful.tag.gettags(screen)[i]
                                                 if tag then
                                                    awful.tag.viewonly(tag)
                                                 end
                                           end),
                                           awful.key({ modkey, "Control" }, "#" .. i + 9,
                                              function ()
                                                 local screen = mouse.screen
                                                 local tag = awful.tag.gettags(screen)[i]
                                                 if tag then
                                                    awful.tag.viewtoggle(tag)
                                                 end
                                           end),
                                           awful.key({ modkey, "Shift" }, "#" .. i + 9,
                                              function ()
                                                 if client.focus then
                                                    local tag = awful.tag.gettags(client.focus.screen)[i]
                                                    if tag then
                                                       awful.client.movetotag(tag)
                                                    end
                                                 end
                                           end),
                                           awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                                              function ()
                                                 if client.focus then
                                                    local tag = awful.tag.gettags(client.focus.screen)[i]
                                                    if tag then
                                                       awful.client.toggletag(tag)
                                                    end
                                                 end
        end))
     end

     clientbuttons = awful.util.table.join(
        awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
        awful.button({ modkey }, 1, awful.mouse.client.move),
        awful.button({ modkey }, 3, awful.mouse.client.resize))

   #+END_SRC

** Pull it all together

   #+BEGIN_SRC lua :tangle yes
     root.keys(globalkeys)
   #+END_SRC

* Rules
  #+BEGIN_SRC lua :tangle yes
    awful.rules.rules = {
       -- All clients will match this rule.
       { rule = { },
         properties = { border_width = beautiful.border_width,
                        border_color = beautiful.border_normal,
                        focus = awful.client.focus.filter,
                        keys = clientkeys,
                        buttons = clientbuttons } },
       { rule = { instance = "Chrome" },
         properties = {tag = tags[1][2]}}
    }
  #+END_SRC
  
* Signals
  
  Signal function to execute when a new client appears.
  #+BEGIN_SRC lua :tangle yes
    client.connect_signal("manage", function (c, startup)
  #+END_SRC
  
** Hover focus
   
   This is one of my favorite things in a window manager, I *love* it when I hover over a window and it focuses.

   #+BEGIN_SRC lua :tangle yes
     c:connect_signal("mouse::enter", function(c)
                         if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
                         and awful.client.focus.filter(c) then
                            client.focus = c
                         end
     end)
   #+END_SRC

   #+BEGIN_SRC lua :tangle yes
     if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
           awful.placement.no_overlap(c)
           awful.placement.no_offscreen(c)
        end
     end

     local titlebars_enabled = false
     if titlebars_enabled and (c.type == "normal" or c.type == "dialog") then
        -- buttons for the titlebar
        local buttons = awful.util.table.join(
           awful.button({ }, 1, function()
                 client.focus = c
                 c:raise()
                 awful.mouse.client.move(c)
           end),
           awful.button({ }, 3, function()
                 client.focus = c
                 c:raise()
                 awful.mouse.client.resize(c)
        end))

        -- Widgets that are aligned to the left
        local left_layout = wibox.layout.fixed.horizontal()
        left_layout:add(awful.titlebar.widget.iconwidget(c))
        left_layout:buttons(buttons)

        -- Widgets that are aligned to the right
        local right_layout = wibox.layout.fixed.horizontal()
        right_layout:add(awful.titlebar.widget.floatingbutton(c))
        right_layout:add(awful.titlebar.widget.maximizedbutton(c))
        right_layout:add(awful.titlebar.widget.stickybutton(c))
        right_layout:add(awful.titlebar.widget.ontopbutton(c))
        right_layout:add(awful.titlebar.widget.closebutton(c))

        -- The title goes in the middle
        local middle_layout = wibox.layout.flex.horizontal()
        local title = awful.titlebar.widget.titlewidget(c)
        title:set_align("center")
        middle_layout:add(title)
        middle_layout:buttons(buttons)

        -- Now bring it all together
        local layout = wibox.layout.align.horizontal()
        layout:set_left(left_layout)
        layout:set_right(right_layout)
        layout:set_middle(middle_layout)

        awful.titlebar(c):set_widget(layout)
     end
     end)

     client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
     client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
   #+END_SRC
