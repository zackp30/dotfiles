#!/bin/sh

# Borrowed from https://raw.githubusercontent.com/sgf-dma/remote_x11/remote_x11/src/remote_x11.sh
# I take no credit for this work.
# License is GPLv3, by sgf-dma.

# Run remote X11 client through ssh and socat
# Args:
# 1 - host for ssh to connect,
# 2.. - executed by ssh as command.
#
# Each script instance allows connection for only one client, but script will
# handle correctly several instances running (it'll increase local and remote
# port number).
#
# Script prefers TCP connection to X server, because user running this script
# will much likely be allowed in `xhost`.

set -euf

readonly True=1
readonly False=0

host="$1"
shift

if [ "x$DISPLAY" = x ]; then
    echo "Error: DISPLAY variable not set." 1>&2
    exit 1
fi

#readonly use_cookie="$True"  # Use MIT cookie or not.
use_cookie="$True"

# Display number.
ndisp="${DISPLAY#*:}"	# Remove hostname..
ndisp="${ndisp%.*}"	# ..and remove screen number.
dport=$((6000 + $ndisp))    # Display TCP port.
sock="/tmp/.X11-unix/X$ndisp"	# X server (local) unix domain socket.

disp_inc=1	# Increment for display number.
lport=$(($dport + $disp_inc))	# Listening (local) socat port.
readonly lport_max=6030	    # Maximum socat port number.

socat_pid=''	# background socat process PID.

remoteauth=''	# mit-magic-cookie generated for remote auth.

rdisp=10	# Remote display to use.
rport=$((6000 + $rdisp))    # Remote port to forward.

trap 'rm -vf "$remoteauth"; /bin/kill "$socat_pid" 2>/dev/null;' \
     INT QUIT EXIT 

# Find unused local port.
while [ $lport -lt $lport_max ]; do
    echo "Trying local port $lport.." 1>&2
    # It seems, that without '-u' option i can't reuse port immediately. I.e.
    # unused port, which i'd found here, becomes "already in use", when i'll
    # try to bind to it in following socat (which redirects ssh connection
    # forwarding to X11).
    socat -u TCP-LISTEN:$lport,bind=127.0.0.1 OPEN:/dev/null 2>/dev/null &
    sleep 1
    nc -z 127.0.0.1 $lport || true
    if wait "$!"; then
	break
    fi
    disp_inc=$(($disp_inc + 1))
    lport=$(($dport + $disp_inc))
done
if [ $lport -eq $lport_max ]; then
    echo "Error: Can't find unused local port." 1>&2
    exit 1
fi

# I prefer connecting to X server through TCP, because if 127.0.0.1 is not
# allowed in `xhost` (which is usual), remote X client can connect only
# with correct MIT cookie. Otherwise, if socat connects to unix domain socket and
# user running socat (and this script) is allowed in `xhost` (which is default
# for many distributions), remote X client does not need MIT cookie at all and
# will always pass through, because X server will check socat uid/gid on
# connection.
if [ "$use_cookie" = "$True" ] \
   && socat -u OPEN:/dev/null TCP:127.0.0.1:$dport 2>/dev/null;
then
    echo "Listen on port $lport and connect to TCP port $dport." 1>&2
    socat TCP-LISTEN:$lport,bind=127.0.0.1 TCP:127.0.0.1:$dport &
elif [ -S "$sock" ]; then
    echo "Listen on port $lport and connect to unix domain socket '$sock'." 1>&2
    socat TCP-LISTEN:$lport,bind=127.0.0.1 UNIX-CONNECT:"$sock" &
else
    echo "Error: can't connect to X server on display '$ndisp'". 1>&2
    exit 1
fi
socat_pid="$!"
use_cookie="$False"

# Or add to key: command="sockauth=\"$(mktemp --tmpdir sockauth.XXXXXX)\"; export XAUTHORITY=\"$sockauth\"; export DISPLAY=127.0.0.1:9; xauth nmerge -; eval \"$SSH_ORIGINAL_COMMAND\"" 

# I can't check whether this remote port is available or not, so just
# guessing.
rdisp=$(($rdisp + $disp_inc))
rport=$(($rport + $disp_inc))
echo "Forward remote port $rport to local port $lport."

if [ "$use_cookie" = "$True" ]; then
    remoteauth="$(mktemp --tmpdir remoteauth.XXXXXX)"
    xauth -f "$remoteauth" generate :0 . trusted timeout 5
    echo "Cache auth cookie in $remoteauth."
fi

if [ "$use_cookie" = "$True" ]; then
    xauth -f "$remoteauth" nlist \
	| cut -d' ' -f9
else
    :
fi \
    | ssh -C -R $rport:127.0.0.1:$lport "$host" \
	"set -euf

	 remoteauth=''
	 trap 'rm -vf \"\$remoteauth\"' INT QUIT EXIT

	 export DISPLAY='127.0.0.1:$rdisp'
	 echo \"Remote: Will connect to display \$DISPLAY.\"

	 if [ '\"$use_cookie\"' = '\"$True\"' ]; then
	     remoteauth=\"\$(mktemp --tmpdir remoteauth.XXXXXX)\"
	     export XAUTHORITY=\"\$remoteauth\"
	     echo \"Remote: Will use auth cookie from \$XAUTHORITY.\"
	     read d
	     xauth add ':$rdisp' . \"\$d\"
	 fi

	 $*
	 "
# When ssh runs in the background (with '-f'), command it runs can't read
# stdin.

# socat will be killed and auth cache file removed by `trap` action,

