* Autoloads
** =add-zsh-hook=
   Allows the user to add hooks to certain events that happen in zsh.

   #+BEGIN_SRC shell-script :tangle yes
     autoload -U add-zsh-hook
   #+END_SRC

* Options
** Editor

   =e=: see  [[emacsclient script]]

   #+BEGIN_SRC shell-script :tangle yes
     export EDITOR=e
   #+END_SRC

** Correction

  #+BEGIN_SRC shell-script :tangle yes
    setopt CORRECT
  #+END_SRC

* Functions
** Detect command

   This function returns exit code =1= if the command does *not* exist.

   #+BEGIN_SRC shell-script :tangle yes
     function detect_command() {
         command -v $1 >/dev/null 2>&1 || return 1
         return 0
     }
   #+END_SRC

** Run command

   This function runs the command if the command exists.

   #+BEGIN_SRC shell-script :tangle yes
     function run_command() {
         if [ $($(detect_command $1); echo $?) -eq 0 ]; then
             $@
         fi
     }
   #+END_SRC

** =source_if_exists=

   Source the file if =file= exists.

   #+BEGIN_SRC shell-script :tangle yes
     function source_if_exists() {
         [ ! -e "$1" ] || source "$1"
     }
   #+END_SRC

** Emacs projects

   WARNING: I don't use this anymore.

*** =ep=

    #+BEGIN_SRC shell-script :tangle yes
      function ep {
          emacsclient -c -s $(basename $(projectroot)) $@
      }
    #+END_SRC

*** =ep-start=

    #+BEGIN_SRC shell-script :tangle yes
      function ep-start {
          sleep 1 # wait for shells to initialise, THEN start
          waitforemacs $(basename $(projectroot))
          if [[ $(basename $(projectroot)) == $(basename $HOME) ]]; then
              . /tmp/emacs$UID/ready/server-env
          else
              . /tmp/emacs$UID/ready/$(basename $(projectroot))-env
          fi
          emacs
          rm /tmp/emacs$UID/ready/$PROJECT_NAME
      }
    #+END_SRC

*** =ep-stop=

    #+BEGIN_SRC shell-script :tangle yes



      function ep-stop {
          if [[ $(basename $(projectroot)) == $(basename $HOME) ]]; then
              emacsclient -t -s server -e '(safe-buffers-kill-emacs)'
              rm /tmp/emacs$UID/ready/server
              rm /tmp/emacs$UID/waiting/server
              rm /tmp/emacs$UID/server
          else
              emacsclient -t -s $(basename $(projectroot)) -e '(safe-buffers-kill-emacs)'
              rm /tmp/emacs$UID/ready/$(basename (projectroot))
              rm /tmp/emacs$UID/waiting/$(basename (projectroot))
              rm /tmp/emacs$UID/$(basename (projectroot))
          fi
      }
    #+END_SRC
** Gitignore templates

   http://gitignore.io
   #+BEGIN_SRC shell-script :tangle yes
     function gi() { curl -L -s https://www.gitignore.io/api/$@ }
   #+END_SRC

** Load Minetest mods into config
   #+BEGIN_SRC shell-script :tangle yes
     mt_load_mods() {
       find -maxdepth 1 -mindepth 1 -type d -printf 'load_mod_%f = true\n' >> $1
     }
   #+END_SRC

* PATH
  #+BEGIN_SRC shell-script :tangle yes
    export PATH=$PATH:$HOME/.fzf/bin
    export PATH=$PATH:/usr/local/bin
    export PATH=$PATH:$HOME/.local/bin
    export GOPATH=$HOME/gostuff
  #+END_SRC

** =~/bin=

  #+BEGIN_SRC shell-script :tangle yes
    export PATH=$HOME/bin:$PATH
  #+END_SRC

*** Rationale

    Some people prefer =~/.local/bin=.

    I don't.

    I chose =~/bin= because:

    - =~/bin= is less to type than any of the others (unless somebody
      uses =~/b=, or actually dumps executable in their home directory(!).
    - Sure =~/.local/bin= is part of a [[http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html][standard]] but I don't see this
      as an advantage, in fact I've never had an issue with =~/bin=
      for executable, instead of =~/.local/bin=.
    - I used =~/bin= since I started using a UNIX based system, and
      will continue to do so.

* History

  #+BEGIN_SRC shell-script :tangle yes
    HISTSIZE=99999999
    SAVEHIST=99999999
    HISTFILE=~/.zsh_history
    setopt SHARE_HISTORY HIST_IGNORE_DUPS EXTENDED_HISTORY
  #+END_SRC

** TODO [0/1]
   - [ ] Decide whether to go over the top and use an sqlite/mysql/whatever database for this.

* gpg-agent

  Runs =gpg-agent= if it isn't already running.
  In GPG 2.1 (currently I only use this on my Arch systems) this doesn't exist.

  #+BEGIN_SRC shell-script :tangle yes
    if [ -f "${HOME}/.gpg-agent-info" ]; then
        . "${HOME}/.gpg-agent-info"
        export GPG_AGENT_INFO
    else
        if [[ $HOST == "linux-wtin" ]]; then
            gpg-agent --enable-ssh-support --daemon --write-env-file "${HOME}/.gpg-agent-info"
        else
            gpg-agent --daemon --write-env-file "${HOME}/.gpg-agent-info"
        fi
    fi
  #+END_SRC

* zkbd

    From the ZSH wiki.
    Create a zkbd compatible hash to add other keys to this hash, see:
    man 5 terminfo.

  #+BEGIN_SRC shell-script :tangle yes
    typeset -A key

    key[Home]=${terminfo[khome]}
    key[End]=${terminfo[kend]}
    key[Insert]=${terminfo[kich1]}
    key[Delete]=${terminfo[kdch1]}
    key[Up]=${terminfo[kcuu1]}
    key[Down]=${terminfo[kcud1]}
    key[Left]=${terminfo[kcub1]}
    key[Right]=${terminfo[kcuf1]}
    key[PageUp]=${terminfo[kpp]}
    key[PageDown]=${terminfo[knp]}

    # setup key accordingly
    [[ -n "${key[Home]}"    ]] && bindkey "${key[Home]}"    beginning-of-line
    [[ -n "${key[End]}"     ]] && bindkey "${key[End]}"     end-of-line
    [[ -n "${key[Insert]}"  ]] && bindkey "${key[Insert]}"  overwrite-mode
    [[ -n "${key[Delete]}"  ]] && bindkey "${key[Delete]}"  delete-char
    [[ -n "${key[Up]}"      ]] && bindkey "${key[Up]}"      up-line-or-history
    [[ -n "${key[Down]}"    ]] && bindkey "${key[Down]}"    down-line-or-history
    [[ -n "${key[Left]}"    ]] && bindkey "${key[Left]}"    backward-char
    [[ -n "${key[Right]}"   ]] && bindkey "${key[Right]}"   forward-char

    # Finally, make sure the terminal is in application mode, when zle is
    # active. Only then are the values from $terminfo valid.
    function zle-line-init () {
        echoti smkx
    }
    function zle-line-finish () {
        echoti rmkx
    }

    zle -N zle-line-init
    zle -N zle-line-finish
  #+END_SRC

* Source plugins

  #+BEGIN_SRC shell-script :tangle yes
    # source_if_exists ~/.zsh/plugins/opp.zsh/opp.zsh
    # source_if_exists ~/.zsh/plugins/opp.zsh/opp/*.zsh
    source_if_exists ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    source_if_exists ~/.zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
    source_if_exists ~/.homesick/repos/homeshick/homeshick.sh
    source_if_exists ~/.zsh/plugins/zsh-vcs-prompt/zshrc.sh
    source_if_exists ~/.zsh/plugins/zsh-autopair/zsh-autopair.plugin.zsh
    source_if_exists ~/.zsh/plugins/fzf.zsh
    source_if_exists ~/.locals.sh # host specific things *not* to be checked into version control.
  #+END_SRC

* pyenv

  Initial =pyenv= if found.

  #+BEGIN_SRC shell-script :tangle yes
    if detect_command pyenv; then
        eval "$(pyenv init -)"
    fi
  #+END_SRC

* Allow myself to use comments interactively

  #+BEGIN_SRC shell-script :tangle yes
    setopt interactivecomments
  #+END_SRC


* Completion

  I found this a long time ago, and I can’t remember where I found it
  from, credit goes to whoever made this.

  #+BEGIN_SRC shell-script :tangle yes
    setopt prompt_subst
    fpath=(~/.zsh/plugins/zsh-completions/src ~/.zsh/completion $fpath)
    autoload -U colors && colors
    autoload -Uz compinit
    compinit
    zstyle ':completion:*' menu select
    zstyle ':completion:*' auto-description 'specify: %d'
    zstyle ':completion:*' completer _expand _complete _correct _approximate
    zstyle ':completion:*' format 'Completing %d'
    zstyle ':completion:*' group-name ''
    zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
    zstyle ':completion:*' list-colors ''
    zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
    zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
    zstyle ':completion:*' use-compctl true
    zstyle ':completion:*' verbose true
    zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
    zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
    eval "$(dircolors -b)"
  #+END_SRC

  #+BEGIN_SRC shell-script :tangle yes
    if [[ -z "$STY" && -z "$TMUX" ]] && [[ "$TERM" == (xterm|rxvt|konsole)* || -n "$COLORTERM" ]] && [[ "$TERM" != "dumb"  ]]; then
        export TERM='xterm-256color'
    fi
  #+END_SRC

* Key bindings
** vi modal editing for zsh

   This feature is built-in, it brings vi to zsh.

  #+BEGIN_SRC shell-script :tangle yes
    bindkey -v
  #+END_SRC

** History substring searching

   Fancier version of =C-r=.

   #+BEGIN_SRC shell-script :tangle yes
     bindkey -M vicmd 'k' history-substring-search-up
     bindkey -M vicmd 'j' history-substring-search-down
     bindkey '^[[A' history-substring-search-up
     bindkey '^[[B' history-substring-search-down
    #+END_SRC

** =C-o= -> =cd=

  #+BEGIN_SRC shell-script :tangle yes
    bindkey -s '^O' '^qcd\n'
  #+END_SRC
* VCS prompt
** Enable caching

  #+BEGIN_SRC shell-script :tangle yes
    ZSH_VCS_PROMPT_ENABLE_CACHING='true'
  #+END_SRC

* vi-mode prompt

  When we [[vi modal editing for zsh][enable vi modal editing]] we would also like an indicator of
  what mode we're in.

  Unfortunately I cannot remember where I retrieved this from,
  otherwise I would give credit. (I believe I made the =z-prexec=
  function however)

  #+BEGIN_SRC shell-script :tangle yes

    VIM_PROMPT="%F{yellow}%F{blue}[%f%F{yellow}N%f%F{blue}]%k%f"
    function z-preexec() {
        local th="$?"
        local reason
        case "$th" in
            0) # green for "normal" exit status (as in, no error)
                color='green' ;;
            *) # anything else is usually an error, color red
                color='red' ;;
        esac
        z_retcode_prompt="%K{red}$reason%k%F{$color}"$th'%f'
    }
    add-zsh-hook precmd z-preexec
    function zle-line-init zle-keymap-select {
        RPS1='${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/} $z_retcode_prompt'
        zle reset-prompt
    }
  #+END_SRC

* =fancy-ctrl-z=

  Code not mine.

  #+BEGIN_SRC shell-script :tangle yes
    zle -N zle-line-init
    zle -N zle-keymap-select
    fancy-ctrl-z () {
        if [[ $#BUFFER -eq 0 ]]; then
            fg
            zle redisplay
        else
            zle push-input
            zle clear-screen
        fi
    }
    zle -N fancy-ctrl-z
    bindkey '^Z' fancy-ctrl-z

  #+END_SRC

* FZF

  FZF is a generic fuzzy-finder for the shell, it's like Vim's CtrlP
  or Emacs' Helm but using standard shell pipes.

  Taken from the FZF README.

** fe [FUZZY PATTERN] - Open the selected file with the default editor
      - Bypass fuzzy finder if there's only one match (--select-1)
      - Exit if there's no match (--exit-0)

  #+BEGIN_SRC shell-script :tangle yes
    fe() {
        local file
        file=$(fzf --query="$1" --select-1 --exit-0)
        [ -n "$file" ] && ${EDITOR:-vim} "$file"
    }
  #+END_SRC

** fd - cd to selected directory

  #+BEGIN_SRC shell-script :tangle yes
    fd() {
        local dir
        dir=$(find ${1:-*} -path '*/\.*' -prune \
                   -o -type d -print 2> /dev/null | fzf +m) &&
            cd "$dir"
    }
  #+END_SRC

** fda - including hidden directories

  #+BEGIN_SRC shell-script :tangle yes
    fda() {
        local dir
        dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
    }
#+END_SRC

** fh - repeat history

   #+BEGIN_SRC shell-script :tangle yes
      fh() {
          eval $(([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s | sed 's/ *[0-9]* *//')
      }
   #+END_SRC

** fkill - kill process

   #+BEGIN_SRC shell-script :tangle yes
     fkill() {
         ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9}
     }
   #+END_SRC

** fbr - checkout git branch

   #+BEGIN_SRC shell-script :tangle yes
    fbr() {
        local branches branch
        branches=$(git branch) &&
            branch=$(echo "$branches" | fzf +s +m) &&
            git checkout $(echo "$branch" | sed "s/.* //")
    }
  #+END_SRC

** fstage - stage uncommited file

   #+BEGIN_SRC shell-script :tangle yes
    fstage() {
        local files to_stage
        files="$(git status --porcelain)"
        to_stage=$(echo $files | fzf -m | rev | cut -d' ' -f1 | rev)
        git add $(echo $to_stage | tr '\n' ' ')
    }
  #+END_SRC

** fco - checkout git commit

   #+BEGIN_SRC shell-script :tangle yes
    fco() {
        local commits commit
        commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
            commit=$(echo "$commits" | fzf +s +m -e) &&
            git checkout $(echo "$commit" | sed "s/ .*//")
    }
  #+END_SRC

** ftags - search ctags

   #+BEGIN_SRC shell-script :tangle yes
     ftags() {
         local line
         [ -e tags ] &&
             line=$(
                 awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
                     cut -c1-80 | fzf --nth=1,2
                 ) && $EDITOR $(cut -f3 <<< "$line") -c "set nocst" \
                              -c "silent tag $(cut -f2 <<< "$line")"
     }
  #+END_SRC

* ssh-agent

#+BEGIN_SRC shell-script :tangle yes
    SSH_ENV="$HOME/.ssh/environment"

    function start_agent {
         echo "Initialising new SSH agent..."
         ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
         echo succeeded
         chmod 600 "${SSH_ENV}"
         . "${SSH_ENV}" > /dev/null
         ssh-add
    }

    # Source SSH settings, if applicable

  if [[ $HOST != "linux-wtin" ]]; then
    if [ -f "${SSH_ENV}" ]; then
         . "${SSH_ENV}" > /dev/null
         ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
             start_agent;
         }
    else
         start_agent;
    fi
  fi
#+END_SRC

* pprompt

  My own multi-line prompt, [[http://assets.apertron.net/screens/1443966011.png][I like it]].

** Colors

  #+BEGIN_SRC shell-script :tangle yes
    _p_color_date=cyan
    _p_color_pwd=cyan
    _p_color_pwd_fg=red
    _p_color_user=white
    _p_color_user_fg=black
    _p_color_host=white
    _p_color_host_fg=black

    #+END_SRC

** Modules

*** Root-or-not-root symbol

#+BEGIN_SRC shell-script :tangle yes


  p_module_privsymbol() {
        if [[ $(print -P "%#") == "#" ]] ; then
            _p_color_user_privsymbol=red
        else
            _p_color_user_privsymbol=blue
        fi
        echo "%F{$_p_color_user_privsymbol}%#%f"
    }
#+END_SRC

*** Hostname

#+BEGIN_SRC shell-script :tangle yes
    p_module_host() {
        echo "%F{$_p_color_host_fg}%K{$_p_color_host}%m%k%f"
    }
#+END_SRC

*** Username

#+BEGIN_SRC shell-script :tangle yes
    p_module_user() {
        echo "%F{$_p_color_user_fg}%K{$_p_color_user}%n%F{red}⍟%f%k%f"
    }
#+END_SRC

*** Current directory.

#+BEGIN_SRC shell-script :tangle yes
    p_module_pwd() {
        echo "%F{$_p_color_pwd_fg}%K{$_p_color_pwd}%~%k%f"
    }
#+END_SRC

*** Time

#+BEGIN_SRC shell-script :tangle yes
    p_module_time() {
        echo '%F{$_p_color_date}%D{%H:%M:%S}%f'
    }
#+END_SRC

** Load
   #+BEGIN_SRC shell-script :tangle yes
    p_load() {
        export PS1=$(p_module_pwd)" "
        export PS1=$PS1$(p_module_time)" "
        export PS1=$PS1$(p_module_user)
        export PS1=$PS1$(p_module_host)" "
        export PS1=$PS1$(p_module_privsymbol)" "
        export PS1=$PS1'$(vcs_super_info)'
        export PS1=$PS1$'\n'
        export PS1=$PS1"$ "
    }

    p_load
   #+END_SRC
** Dumb terminal handling

   =$TERM= is set to "dumb" when using TRAMP to connect to the host,
   my custom prompt doesn't work well with TRAMP (i.e: makes TRAMP
   wait forever for a prompt), so simply set =PS1= to a very simple
   prompt.

   #+BEGIN_SRC shell-script :tangle yes
    [[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ '
   #+END_SRC

* Unset =DISPLAY= because of my remote desktop inheriting it, preventing me from attaching to tmux.

   #+BEGIN_SRC shell-script :tangle yes
    if [[ $DISPLAY ]]; then unset TMUX; fi
  #+END_SRC

* Cleanup of old sessions

    When in tmux I leave some panes to idle, but when I'm not in tmux I don't need =$TMOUT=
    especially when forwarding ports, so determine if within =TMUX= and set =TMOUT= to an hour.

  #+BEGIN_SRC shell-script :tangle yes
    [[ ! -z $TMUX ]] && export TMOUT=3600
  #+END_SRC

* Aliases

** =gcem=

   Bad habits...

   The commit message (obviously) isn't empty, but things like
   `git-rebase` mess up with a repo with empty commit messages.

   #+BEGIN_SRC shell-script :tangle yes
     alias gcem="git commit -am 'The commit message was empty'"
   #+END_SRC

** =grmv=

   #+BEGIN_SRC shell-script :tangle yes
     alias grmv="git remote -v"
   #+END_SRC

** =gpull=
   #+BEGIN_SRC shell-script :tangle yes
     alias gpull='git pull'
   #+END_SRC

** =gstatus=
   #+BEGIN_SRC shell-script :tangle yes
     alias gstatus='git status'
   #+END_SRC

** =..=
   #+BEGIN_SRC shell-script :tangle yes
     alias ..='cd ..'
   #+END_SRC

** =cab=
   #+BEGIN_SRC shell-script :tangle yes
    alias cab='cabal install'
   #+END_SRC

** =:q=
   #+BEGIN_SRC shell-script :tangle yes
    alias :q='exit'
   #+END_SRC

** =disp=
   #+BEGIN_SRC shell-script :tangle yes
   alias disp='DISPLAY=:100 '
   #+END_SRC

* emacsclient script

Can't be an alias since almost nothing can read aliases from the
shell, since they aren't actual programs.

#+INCLUDE: "~/bin/e" src shell
* RVM
  #+BEGIN_SRC shell-script :tangle yes
    export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
  #+END_SRC
* direnv

  #+BEGIN_SRC shell-script :tangle yes
    if detect_command direnv; then
        eval "$(direnv hook zsh)"
    fi
  #+END_SRC
