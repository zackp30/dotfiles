* Misc

  #+BEGIN_SRC shell :tangle yes
    setopt AUTO_PUSHD
  #+END_SRC

* Functions
** Detect command
   
   This function returns exit code =1= if the command does *not* exist.

   #+BEGIN_SRC shell :tangle yes
     function detect_command() {
         command -v $1 >/dev/null 2>&1 || return 1
         return 0
     }
   #+END_SRC
  
** Run command

   This function runs the command if the command exists.

   #+BEGIN_SRC shell :tangle yes
     function run_command() {
         if [ $($(detect_command $1); echo $?) -eq 0 ]; then
             $@
         fi
     }
   #+END_SRC

** =source_if_exists=
   
   Source the file if =file= exists.

   #+BEGIN_SRC shell :tangle yes
     function source_if_exists() {
         [ ! -e "$1" ] || source "$1"
     }
   #+END_SRC

** Emacs projects
*** =ep=

    #+BEGIN_SRC shell :tangle yes
      function ep {
          emacsclient -c -s $(basename $(projectroot)) $@
      }
    #+END_SRC

*** =ep-start=

    #+BEGIN_SRC shell :tangle yes
      function ep-start {
          sleep 1 # wait for shells to initialise, THEN start
          waitforemacs $(basename $(projectroot))
          if [[ $(basename $(projectroot)) == $(basename $HOME) ]]; then
              . /tmp/emacs$UID/ready/server-env
          else
              . /tmp/emacs$UID/ready/$(basename $(projectroot))-env
          fi
          emacs
          rm /tmp/emacs$UID/ready/$PROJECT_NAME
      }
    #+END_SRC

*** =ep-stop=

    #+BEGIN_SRC shell :tangle yes



      function ep-stop {
          if [[ $(basename $(projectroot)) == $(basename $HOME) ]]; then
              emacsclient -t -s server -e '(safe-buffers-kill-emacs)'
              rm /tmp/emacs$UID/ready/server
              rm /tmp/emacs$UID/waiting/server
              rm /tmp/emacs$UID/server
          else
              emacsclient -t -s $(basename $(projectroot)) -e '(safe-buffers-kill-emacs)'
              rm /tmp/emacs$UID/ready/$(basename (projectroot))
              rm /tmp/emacs$UID/waiting/$(basename (projectroot))
              rm /tmp/emacs$UID/$(basename (projectroot))
          fi
      }
    #+END_SRC
** http://gitignore.io
   #+BEGIN_SRC shell :tangle yes
     function gi() { curl -L -s https://www.gitignore.io/api/$@ }
   #+END_SRC
** Load Minetest mods into config
   #+BEGIN_SRC shell :tangle yes
     mt_load_mods() {
         for i in $(echo *) ; do echo $i | sed 's/^/load_mod_/g' | sed 's/$/ = true/g' ; done >> $1
     }
   #+END_SRC
* PATH
  #+BEGIN_SRC shell :tangle yes
    export PATH=$PATH:$HOME/.fzf/bin
    export PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting
    export PATH=$HOME/bin:$PATH # weird how this isn't a default...
    export PATH=$PATH:/usr/local/bin
    export PATH=$PATH:$HOME/.local/bin
    export GOPATH=$HOME/gostuff
  #+END_SRC
* Variables
  
  #+BEGIN_SRC shell :tangle yes
    export EDITOR=e
    HISTSIZE=99999999
    SAVEHIST=99999999
    HISTFILE=~/.zsh_history
  #+END_SRC

* =gpg-agent=

  Runs =gpg-agent= if it isn't already running.
  In GPG 2.1 (currently I only use this on my Arch systems) this doesn't exist.
  #+BEGIN_SRC shell :tangle yes
    if [ "$(cat /etc/os-release | grep Arch; echo $?)" == 1]; then # crude Arch detection
       if [ -f "${HOME}/.gpg-agent-info" ]; then
           . "${HOME}/.gpg-agent-info"
           export GPG_AGENT_INFO
       else
           if [[ $HOST == "linux-nyit" ]]; then
               gpg-agent --enable-ssh-support --daemon --write-env-file "${HOME}/.gpg-agent-info"
           else
               gpg-agent --daemon --write-env-file "${HOME}/.gpg-agent-info"
           fi
       fi
       else
           export SSH_AUTH_SOCK="~/.gnupg/S.gpg-agent.ssh"
           gpgconf --launch gpg-agent
    fi
  #+END_SRC

* zkbd
  
  #+BEGIN_SRC shell :tangle yes
    # From the ZSH wiki
    # create a zkbd compatible hash;
    # to add other keys to this hash, see: man 5 terminfo

    typeset -A key

    key[Home]=${terminfo[khome]}
    key[End]=${terminfo[kend]}
    key[Insert]=${terminfo[kich1]}
    key[Delete]=${terminfo[kdch1]}
    key[Up]=${terminfo[kcuu1]}
    key[Down]=${terminfo[kcud1]}
    key[Left]=${terminfo[kcub1]}
    key[Right]=${terminfo[kcuf1]}
    key[PageUp]=${terminfo[kpp]}
    key[PageDown]=${terminfo[knp]}

    # setup key accordingly
    [[ -n "${key[Home]}"    ]]  && bindkey  "${key[Home]}"    beginning-of-line
    [[ -n "${key[End]}"     ]]  && bindkey  "${key[End]}"     end-of-line
    [[ -n "${key[Insert]}"  ]]  && bindkey  "${key[Insert]}"  overwrite-mode
    [[ -n "${key[Delete]}"  ]]  && bindkey  "${key[Delete]}"  delete-char
    [[ -n "${key[Up]}"      ]]  && bindkey  "${key[Up]}"      up-line-or-history
    [[ -n "${key[Down]}"    ]]  && bindkey  "${key[Down]}"    down-line-or-history
    [[ -n "${key[Left]}"    ]]  && bindkey  "${key[Left]}"    backward-char
    [[ -n "${key[Right]}"   ]]  && bindkey  "${key[Right]}"   forward-char

    # Finally, make sure the terminal is in application mode, when zle is
    # active. Only then are the values from $terminfo valid.
    function zle-line-init () {
        echoti smkx
    }
    function zle-line-finish () {
        echoti rmkx
    }

    zle -N zle-line-init
    zle -N zle-line-finish
  #+END_SRC

* Source plugins
  
  #+BEGIN_SRC shell :tangle yes
    source_if_exists ~/.zsh/plugins/opp.zsh/opp.zsh
    source_if_exists ~/.zsh/plugins/opp.zsh/opp/*.zsh
    source_if_exists ~/.zsh/plugins/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
    source_if_exists ~/.zsh/plugins/zsh-history-substring-search/zsh-history-substring-search.zsh
    source_if_exists $HOME/.homesick/repos/homeshick/homeshick.sh
    source_if_exists ~/.autojump/etc/profile.d/autojump.sh
    source_if_exists ~/.zsh/plugins/zsh-vcs-prompt/zshrc.sh
    source_if_exists ~/.zsh/plugins/fzf.zsh
    source_if_exists ~/.locals.sh # host specific things *not* to be checked into version control.
  #+END_SRC

* =pyenv=

  Initial =pyenv= if found.

  #+BEGIN_SRC shell :tangle yes
    if [[ ! "$(which pyenv)" =~ "not found" ]] ; then
        eval "$(pyenv init -)"
    fi
  #+END_SRC

* Completion
  #+BEGIN_SRC shell :tangle yes
    setopt prompt_subst
    autoload -U colors && colors
    setopt histignorealldups sharehistory
    autoload -Uz compinit
    compinit
    zstyle ':completion:*' menu select
    zstyle ':completion:*' auto-description 'specify: %d'
    zstyle ':completion:*' completer _expand _complete _correct _approximate
    zstyle ':completion:*' format 'Completing %d'
    zstyle ':completion:*' group-name ''
    zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}
    zstyle ':completion:*' list-colors ''
    zstyle ':completion:*' matcher-list '' 'm:{a-z}={A-Z}' 'm:{a-zA-Z}={A-Za-z}' 'r:|[._-]=* r:|=* l:|=*'
    zstyle ':completion:*' select-prompt %SScrolling active: current selection at %p%s
    zstyle ':completion:*' use-compctl true
    zstyle ':completion:*' verbose true
    zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#)*=0=01;31'
    zstyle ':completion:*:kill:*' command 'ps -u $USER -o pid,%cpu,tty,cputime,cmd'
    setopt interactivecomments
    eval "$(dircolors -b)"
  #+END_SRC

  #+BEGIN_SRC shell :tangle yes
    if [[ -z "$STY" && -z "$TMUX" ]] && [[ "$TERM" == (xterm|rxvt|konsole)* || -n "$COLORTERM" ]] && [[ "$TERM" != "dumb"  ]]; then
        export TERM='xterm-256color'
    fi
  #+END_SRC

* key bindings

  #+BEGIN_SRC shell :tangle yes
    bindkey -v
    bindkey -s '^O' '^qcd\n'
    bindkey '^f' vi-forward-blank-word
    export KEYTIMEOUT=1
    ZSH_VCS_PROMPT_ENABLE_CACHING='true'
    [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*
    fpath=(~/.zsh/plugins/zsh-completions/src ~/.zsh/completion $fpath)
    export rvmsudo_secure_path=1

    VIM_PROMPT="%F{yellow}%F{blue}[%f%F{yellow}N%f%F{blue}]%k%f"
    function zle-line-init zle-keymap-select {
        RPS1="${${KEYMAP/vicmd/$VIM_PROMPT}/(main|viins)/}"
        zle reset-prompt
    }
  #+END_SRC

* Prompt

  #+BEGIN_SRC shell :tangle yes
    zle -N zle-line-init
    zle -N zle-keymap-select
    bindkey -M vicmd 'k' history-substring-search-up
    bindkey -M vicmd 'j' history-substring-search-down
    bindkey '^[[A' history-substring-search-up
    bindkey '^[[B' history-substring-search-down
    fancy-ctrl-z () {
        if [[ $#BUFFER -eq 0 ]]; then
            fg
            zle redisplay
        else
            zle push-input
            zle clear-screen
        fi
    }
    zle -N fancy-ctrl-z
    bindkey '^Z' fancy-ctrl-z
    autoload -Uz compinit
    compinit

  #+END_SRC

* FZF

  FZF is a generic fuzzy-finder for the shell, it's like Vim's CtrlP or Emacs' Helm but using standard shell pipes.

  Taken from the FZF README.

  #+BEGIN_SRC shell :tangle yes
    # fe [FUZZY PATTERN] - Open the selected file with the default editor
    #   - Bypass fuzzy finder if there's only one match (--select-1)
    #   - Exit if there's no match (--exit-0)
    fe() {
        local file
        file=$(fzf --query="$1" --select-1 --exit-0)
        [ -n "$file" ] && ${EDITOR:-vim} "$file"
    }

    # fd - cd to selected directory
    fd() {
        local dir
        dir=$(find ${1:-*} -path '*/\.*' -prune \
                   -o -type d -print 2> /dev/null | fzf +m) &&
            cd "$dir"
    }

    # fda - including hidden directories
    fda() {
        local dir
        dir=$(find ${1:-.} -type d 2> /dev/null | fzf +m) && cd "$dir"
    }

    # fh - repeat history
    fh() {
        eval $(([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s | sed 's/ *[0-9]* *//')
    }

    # fkill - kill process
    fkill() {
        ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9}
    }

    # fbr - checkout git branch
    fbr() {
        local branches branch
        branches=$(git branch) &&
            branch=$(echo "$branches" | fzf +s +m) &&
            git checkout $(echo "$branch" | sed "s/.* //")
    }

    # fstage - stage uncommited file

    fstage() {
        local files to_stage
        files="$(git status --porcelain)"
        to_stage=$(echo $files | fzf -m | rev | cut -d' ' -f1 | rev)
        git add $(echo $to_stage | tr '\n' ' ')
    }

    # fco - checkout git commit
    fco() {
        local commits commit
        commits=$(git log --pretty=oneline --abbrev-commit --reverse) &&
            commit=$(echo "$commits" | fzf +s +m -e) &&
            git checkout $(echo "$commit" | sed "s/ .*//")
    }

    # ftags - search ctags
    ftags() {
        local line
        [ -e tags ] &&
            line=$(
                awk 'BEGIN { FS="\t" } !/^!/ {print toupper($4)"\t"$1"\t"$2"\t"$3}' tags |
                    cut -c1-80 | fzf --nth=1,2
                ) && $EDITOR $(cut -f3 <<< "$line") -c "set nocst" \
                             -c "silent tag $(cut -f2 <<< "$line")"
    }
  #+END_SRC
  
** Screenshots


* pprompt


  #+BEGIN_SRC shell :tangle yes
    # Colors
    _p_color_date=cyan
    _p_color_pwd=cyan
    _p_color_pwd_fg=red
    _p_color_user=white
    _p_color_user_fg=black
    _p_color_host=white
    _p_color_host_fg=black

    p_module_privsymbol() {
        if [[ $(print -P "%#") == "#" ]] ; then
            _p_color_user_privsymbol=red
        else
            _p_color_user_privsymbol=blue
        fi
        echo "%F{$_p_color_user_privsymbol}%#%f"
    }

    p_module_host() {
        echo "%F{$_p_color_host_fg}%K{$_p_color_host}%m%k%f"
    }

    p_module_user() {
        echo "%F{$_p_color_user_fg}%K{$_p_color_user}%n%F{red}⍟%f%k%f"
    }

    p_module_pwd() {
        echo "%F{$_p_color_pwd_fg}%K{$_p_color_pwd}%~%k%f"
    }

    p_module_time() {
        echo '%F{$_p_color_date}%D{%H:%M:%S}%f'
    }

    p_load() {
        export PS1=$(p_module_pwd)" "
        export PS1=$PS1$(p_module_time)" "
        export PS1=$PS1$(p_module_user)
        export PS1=$PS1$(p_module_host)" "
        export PS1=$PS1$(p_module_privsymbol)" "
        export PS1=$PS1'$(vcs_super_info)'
        export PS1=$PS1$'\n'
        export PS1=$PS1"$ "
    }

    p_load

    alias gpull='git pull'
    alias gstatus='git status'
    alias ..='cd ..'
    alias cab='cabal install'
    alias :q='exit'

    # `$TERM' is set to "dumb" when using TRAMP to connect to the host, my custom prompt
    # doesn't work well with TRAMP (i.e: makes TRAMP wait forever for a prompt), so simply
    # set `PS1' to a very simple prompt.
    [[ $TERM == "dumb" ]] && unsetopt zle && PS1='$ '

    [[ $DISPLAY == ":2" ]] && unset TMUX

    # When in tmux I leave some panes to idle, but when I'm not in tmux I don't need `$TMOUT'
    # especially when forwarding ports, so determine if within `TMUX' and set `TMOUT'.
    [[ $TMUX ]] && export TMOUT=3600



    task
  #+END_SRC

* Aliases

** =gcem=

   Bad habits...

   #+BEGIN_SRC shell :tangle yes
     alias gcem="git commit -am '' --allow-empty-message"
   #+END_SRC

** =grmv=

   #+BEGIN_SRC shell :tangle yes
     alias grmv="git remote -v"
   #+END_SRC
