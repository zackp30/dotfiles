(in-package :stumpwm)

(setf *normal-border-width* 2)

(set-focus-color "orange")
(set-unfocus-color "palegreen3")

(defcommand reinit () ()
  (run-commands "reload" "loadrc"))

(defcommand rofi () ()
  (run-shell-command "rofi -show run"))

(defcommand chromium () () ;; "chrome" on xieshaij, chromium elsehwhere; TODO: Other machines.
  (run-shell-command "CHROME_DEVEL_SANDBOX=~/chrome-linux/chrome_sandbox ~/chrome-linux/chrome"))

(defcommand (fprev tile-group) () ()
  "Cycle through the frame tree to the prev frame."
  (focus-prev-frame (current-group)))

(defcommand lock () ()
  (run-shell-command "lock"))

(defvar *misc-map* (make-sparse-keymap))
(define-key *root-map* (kbd "C") '*misc-map*)

(if (string-equal (machine-instance) "xieshaij")
    (set-prefix-key (kbd "M-z"))
    (set-prefix-key (kbd "M-C-z")))

(define-key *root-map* (kbd "c") "exec urxvtc-256color")

(define-key *root-map* (kbd "C-c") "chromium") ;; browser

(define-key *root-map* (kbd "C-M-z") "fnext")
(define-key *root-map* (kbd "C-M-x") "fprev")

(define-key *root-map* (kbd "C-q") "reinit") ;; reload config

(setq *mouse-focus-policy* :sloppy)

(define-key *root-map* (kbd "`") "lock") ;; reload config

(define-key *misc-map* (kbd ",") "run-shell-command")

(run-shell-command "~/ins/bin/copyq")
(define-key *misc-map* (kbd "c") "exec ~/ins/bin/copyq show")
(define-key *misc-map* (kbd "C-p") "exec ~/ins/bin/copyq paste")

(loop for i from 0 to 9 do (run-commands (format nil "gnewbg ~a" i))) ;; 10 workspaces

(run-commands "mode-line")

(setf *mode-line-timeout* 1)

(setf stumpwm:*screen-mode-line-format*
      (list '(:eval (stumpwm:run-shell-command "date" t))
            "%u"
            "%v"
            '(:eval (stumpwm:run-shell-command "~/bin/bat" t))))

;; courtesy of Peter Seibel
(defmacro with-gensyms ((&rest names) &body body)
  `(let ,(loop for n in names collect `(,n (gensym)))
     ,@body))

(defmacro program-with-layout (name &key (command (string-downcase (string name)))
                                      (props `'(:class ,(string-capitalize command))))
  (with-gensyms (s w h files-path layout rules)
    `(defcommand ,name () ()
                 (let* ((,s (current-screen))
                        (,w (prin1-to-string (screen-width ,s)))
                        (,h (prin1-to-string (screen-height ,s)))
                        (,files-path ".stumpwm.d/rules/")
                        (,layout (concat ,files-path ,command "-layout-" ,w "x" ,h ".lisp"))
                        (,rules (concat ,files-path ,command "-rules" ".lisp")))
                   (gnew ,command)
                   (restore-from-file ,layout)
                   (restore-window-placement-rules ,rules)
                   (run-or-raise ,command ,props)
                   (place-existing-windows)))))

(program-with-layout gimp)
